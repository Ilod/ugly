<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace <#= Case.CamelCase.Convert(CsHelper.Definition.Config.Namespace) #>
{<#
    foreach (GameEnum e in CsHelper.CurrentFile.Enum)
    {
    #>

    
    public enum <#= Case.CamelCase.Convert(e.Name) #>
    {<#
        foreach (KeyValuePair<string, int> kvp in e.Value)
        {
        #>
        
        <#= Case.CamelCase.Convert(kvp.Key) #> = <#= kvp.Value #>,<#
        }
        #>

    }<#
    }
    
    foreach (GameClass c in CsHelper.CurrentFile.Class)
    {
    #>


    public class <#= Case.CamelCase.Convert(c.Name) #>
    {<#
        foreach (ClassMember m in c.Member)
        {
            #>

        public <#
            BasicType type = CsHelper.Definition.GetBasicType(m.Type);
            if (m.Array == 1 && m.IsWeak)
            {
                #>List<<#
            }
            if (type.IsBasic())
            {
                #><#= CsHelper.GetBasicTypeName(type) #><#
            }
            else
            {
                #><#= Case.CamelCase.Convert(m.Type) #><#
            }
            if (m.Array == 1 && m.IsWeak)
            {
                #>><#
            }
            else if (m.Array != 0)
            {
                #>[<#
                for (int i = 1; i < m.Array; ++i)
                {
                    #>,<#
                }
                #>]<#
            }
            #> <#= Case.CamelCase.Convert(m.Name) #><#
            if (m.Array == 0 && type == BasicType.Class && !m.IsWeak)
            {
                #> = new <#= Case.CamelCase.Convert(m.Type) #>()<#
            }
            else if (m.Array == 1 && m.IsWeak)
            {
                #> = new List<<#= Case.CamelCase.Convert(m.Type) #>>()<#
            }
            #>;<#
        }
        #>

        <#
        foreach (ClassMethod m in c.Method)
        {
            #>

        public void <#= Case.CamelCase.Convert(m.Name) #>(<#
            for (int idxParam = 0; idxParam < m.Param.Count; ++idxParam)
            {
                MethodParam a = m.Param[idxParam];
                BasicType type = CsHelper.Definition.GetBasicType(a.Type);
                if (idxParam != 0)
                {
                    #>, <#
                }
                if (type.IsBasic())
                {
                    #><#= CsHelper.GetBasicTypeName(type) #><#
                }
                else
                {
                    #><#= Case.CamelCase.Convert(a.Type) #><#
                }
                #> <#= Case.LowerCamelCase.Convert(a.Name) #><#
            }
            #>)
        {
            Console.WriteLine("<#= m.MethodId #><#
            for (int idxParam = 0, paramCount = m.Param.Sum(a => {
                BasicType type = CsHelper.Definition.GetBasicType(a.Type);
                if (type != BasicType.Class)
                    return 1;
                if (!CsHelper.Definition.Class[a.Type].HasId)
                    return 1;
                return CsHelper.Definition.Class[a.Type].Id.Member.Count;
            }); idxParam < paramCount; ++idxParam)
            {
                #> {<#= idxParam #>}<#
            }
            #>"<#
            foreach (MethodParam a in m.Param)
            {
                BasicType type = CsHelper.Definition.GetBasicType(a.Type);
                switch (type)
                {
                    case BasicType.Bool:
                        #>, <#= Case.LowerCamelCase.Convert(a.Name) #> ? 1 : 0<#
                        break;
                    case BasicType.Char:
                    case BasicType.Enum:
                        #>, (int)<#= Case.LowerCamelCase.Convert(a.Name) #><#
                        break;
                    case BasicType.Class:
                        foreach (string memberId in CsHelper.Definition.Class[a.Type].Id.Member)
                        {
                            #>, (<#= Case.LowerCamelCase.Convert(a.Name) #> != null) ? <#
                            BasicType realType = CsHelper.Definition.GetBasicType(CsHelper.Definition.Class[a.Type].MemberMap[memberId].Type);
                            switch (realType)
                            {
                                case BasicType.Bool:
                                    #>(<#= Case.LowerCamelCase.Convert(a.Name) #>.<#= Case.CamelCase.Convert(memberId) #> ? 1 : 0)<#
                                    break;
                                case BasicType.Char:
                                case BasicType.Enum:
                                    #>((int)<#= Case.LowerCamelCase.Convert(a.Name) #>.<#= Case.CamelCase.Convert(memberId) #>)<#
                                    break;
                                default:
                                    #>(<#= Case.LowerCamelCase.Convert(a.Name) #>.<#= Case.CamelCase.Convert(memberId) #>)<#
                                    break;
                            }
                            #> : -1<#
                        }
                        break;
                    default:
                        #>, <#= Case.LowerCamelCase.Convert(a.Name) #><#
                        break;
                }
            }
                #>);
        }<#
        }
        #>

    }<#
    }
    #>

}