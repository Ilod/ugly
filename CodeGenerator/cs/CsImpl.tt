<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.IO;

namespace <#= Case.CamelCase.Convert(CsHelper.Definition.Config.Namespace) #>
{
    private class Parser
    {
        private string Line;
        private int Index = 0;

        public Parser(string line)
        {
            Line = line;
        }

        public T ReadNextInt<T>()
        {
            unsigned long data = 0;
            bool negative = false;
            if (Index < Line.Length && Line[Index] == '-')
            {
                negative = true;
                ++Index;
            }

            while (Index < Line.Length && Line[Index] >= '0' && Line[Index] <= '9')
            {
                data *= 10;
                data += (Line[Index] - '0');
                ++Index;
            }
            ++Index;
            if (negative)
                return (T)(-((long)data));
            return (T)data;
        }<#

    foreach (GameClass c in CsHelper.Definition.Class.Values)
    {
        #>


        public void Deserialize(<#= Case.CamelCase.Convert(c.Name) #>)
        {<#

        foreach (ClassMember m in c.Member)
        {
            #>

            {<#

            BasicType type = CsHelper.Definition.GetBasicType(m.Type);
            if (m.Array == 0)
            {
                if (type == BasicType.Class)
                {
                    #>

                Deserialize(data.<#= Case.CamelCase.Convert(m.Name) #>);<#
                }
                else
                {
                    #>

                data.<#= Case.CamelCase.Convert(m.Name) #> = ReadNextInt<#= type.IsBasic() ? CsHelper.GetBasicTypeName(type) : Case.CamelCase.Convert(m.Name) #>;<#
                }
            }
            else
            {
                for (int i = 0; i < m.Array; ++i)
                {
                        #>

                int size<#= i #> = ReadNextInt<int>();<#
                }#>

                data.<#= Case.CamelCase.Convert(m.Name) #> = new <#
                if (type.IsBasic())
                {
                    #><#= CsHelper.GetBasicTypeName(type) #><#
                }
                else
                {
                    #><#= Case.CamelCase.Convert(m.Type) #><#
                }
                #>[<#
                for (int i = 0; i < m.Array; ++i)
                {
                    if (i != 0)
                    {
                        #>, <#
                    }
                    #>size<#= i #><#
                }
                #>];<#

                for (int i = 0; i < m.Array; ++i)
                {
                    #>

                for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                {<#
                    this.PushIndent("    ");
                }
                if (type == BasicType.Class)
                {#>

                <#= Case.CamelCase.Convert(m.Type) #> element = new <#= Case.CamelCase.Convert(m.Type) #>();
                Deserialize(element);<#
                }#>

                data.<#= Case.CamelCase.Convert(m.Name) #>[idx0<#
                for (int i = 1; i < m.Array; ++i)
                {
                    #>, idx<#= i #><#
                }
                #>] = <#
                if (type == BasicType.Class)
                {
                    #>element<#
                }
                else
                {
                    #>ReadNextInt<<#= CsHelper.GetBasicTypeName(type) #>>()<#
                }
                #>;<#
                
                for (int i = 0; i < m.Array; ++i)
                {
                    this.PopIndent();
                    #>

                }<#
                }
            }
            #>

            }<#

        }         
        #>
           
        }<#
    }
    #>

    }

    public static partial class GameServer
    {
        public static partial void Play(GameClient client)
        {
            Parser parser = new Parser(Console.ReadLine());
            int playerId = parserReadNextInt<int>();
            <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #> data = new <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #>();
            parser.Deserialize(data);
            client.InitGame(data, data.Player[playerId]);
            for (;;)
            {
                string line = Console.ReadLine();
                if (line == "EOT")
                    break;
                parser = new Parser(line);
                <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #> turn = new <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #>();
                parser.Deserialize(turn);
                client.PlayTurn(turn, turn.Player[playerId]);
            }
            client.Shutdown();
        }
    }
}