<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.IO;

namespace <#= Case.CamelCase.Convert(CsHelper.Definition.Config.Namespace) #>
{
    public static partial class GameServer
    {
        private static <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #> ReadTurn(<#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #> gameSetup)
        {
            Console.WriteLine("EOT");
            string line = Console.ReadLine();
            if (line.StartsWith("EOT"))
                return null;
            Parser parser = new Parser(line);
            <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #> turn = new <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #>();
            parser.Deserialize(turn, gameSetup, turn);
            return turn;
        }
        
        private static Tuple<<#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #>, <#= Case.CamelCase.Convert(CsHelper.Definition.Config.PlayerSetup) #>> ReadSetup()
        {
            string line = Console.ReadLine();
            Parser parser = new Parser(line);
            int playerId = parser.ReadNextInt();
            line = Console.ReadLine();
            parser = new Parser(line);
            <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #> data = new <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #>();
            parser.Deserialize(data, data, null);
            return Tuple.Create(data, data.Player[playerId]);
        }

        private class Parser
        {
            private string Line;
            private int Index = 0;

            public Parser(string line)
            {
                Line = line;
            }

            public long ReadNextLong()
            {
                long data = 0;
                bool negative = false;
                if (Index < Line.Length && Line[Index] == '-')
                {
                    negative = true;
                    ++Index;
                }

                while (Index < Line.Length && Line[Index] >= '0' && Line[Index] <= '9')
                {
                    data *= 10;
                    data += (long)(Line[Index] - '0');
                    ++Index;
                }
                ++Index;
                return negative ? -data : data;
            }
            
            public ulong ReadNextUlong()
            {
                ulong data = 0;

                while (Index < Line.Length && Line[Index] >= '0' && Line[Index] <= '9')
                {
                    data *= 10;
                    data += (ulong)(Line[Index] - '0');
                    ++Index;
                }
                ++Index;
                return data;
            }
            
            public int ReadNextInt()
            {
                return (int)ReadNextLong();
            }
            
            public short ReadNextShort()
            {
                return (short)ReadNextLong();
            }
            
            public sbyte ReadNextSbyte()
            {
                return (sbyte)ReadNextLong();
            }
            
            public uint ReadNextUint()
            {
                return (uint)ReadNextUlong();
            }
            
            public ushort ReadNextUshort()
            {
                return (ushort)ReadNextUlong();
            }
            
            public byte ReadNextByte()
            {
                return (byte)ReadNextUlong();
            }
            
            public char ReadNextChar()
            {
                return (char)ReadNextUlong();
            }
            
            public bool ReadNextBool()
            {
                return ReadNextLong() != 0;
            }<#

        foreach (GameClass c in CsHelper.Definition.Class.Values)
        {
            #>


            public void Deserialize(<#= Case.CamelCase.Convert(c.Name) #> data, <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameSetup) #> gameSetup, <#= Case.CamelCase.Convert(CsHelper.Definition.Config.GameState) #> gameState)
            {<#

            foreach (ClassMember m in c.Member)
            {
                if ((c.HasId && c.Id.Index && c.Id.Member.Contains(m.Name)) || (m.Index == ClassMemberIndexType.MappedFromStrong))
                {
                    continue;
                }
                #>

                {<#

                BasicType type = CsHelper.Definition.GetBasicType(m.Type);
                if (m.Array == 0)
                {
                    if (type.IsBasic())
                    {
                        #>

                    data.<#= Case.CamelCase.Convert(m.Name) #> = ReadNext<#= Case.CamelCase.Convert(CsHelper.GetBasicTypeName(type)) #>();<#
                    }
                    else if (type == BasicType.Class)
                    {
                        if (m.Index == ClassMemberIndexType.RefId)
                        {
                            GameClass realType = CsHelper.Definition.Class[m.Type];
                            for (int i = 0; i <= realType.Id.Member.Count; ++i)
                            {
                                #>

                    int classIdx<#= i #> = ReadNext<int>();<#
                            }
                            #>
                            
                    if (classIdx0 != -1)
                    {
                        data.<#= Case.CamelCase.Convert(m.Name) #> = <#= realType.Id.Source.FormatMapping(Case.CamelCase, null, "gameSetup", "gameState") #>[classIdx0<#
                            for (int i = 1; i <= c.Id.Member.Count; ++i)
                            {
                                #>, classIdx<#= i #><#
                            }
                            #>];
                    }<#
                        }
                        else if (!m.IsWeak)
                        {
                            #>

                    Deserialize(data.<#= Case.CamelCase.Convert(m.Name) #>, gameSetup, gameState);<#
                        }
                    }
                    else // Enum
                    {
                        #>

                    data.<#= Case.CamelCase.Convert(m.Name) #> = (<#=  Case.CamelCase.Convert(m.Type) #>)ReadNextInt();<#
                    }
                }
                else if (!m.IsWeak)
                {
                    for (int i = 0; i < m.Array; ++i)
                    {
                            #>

                    int size<#= i #> = ReadNextInt();<#
                    }#>

                    data.<#= Case.CamelCase.Convert(m.Name) #> = new <#
                    if (type.IsBasic())
                    {
                        #><#= CsHelper.GetBasicTypeName(type) #><#
                    }
                    else
                    {
                        #><#= Case.CamelCase.Convert(m.Type) #><#
                    }
                    #>[<#
                    for (int i = 0; i < m.Array; ++i)
                    {
                        if (i != 0)
                        {
                            #>, <#
                        }
                        #>size<#= i #><#
                    }
                    #>];<#

                    for (int i = 0; i < m.Array; ++i)
                    {
                        #>

                    for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                    {<#
                        this.PushIndent("    ");
                    }
                    if (type == BasicType.Class)
                    {#>

                    <#= Case.CamelCase.Convert(m.Type) #> element = new <#= Case.CamelCase.Convert(m.Type) #>();
                    Deserialize(element, gameSetup, gameState);<#
                        GameClass mType = CsHelper.Definition.Class[m.Type];
                        if (m.Index == ClassMemberIndexType.Strong && mType.HasId && mType.Id.Index)
                        {
                            for (int i = 0; i < mType.Id.Member.Count; ++i)
                            {
                                #>

                    element.<#= Case.CamelCase.Convert(mType.Id.Member[i]) #> = idx<#= i #>;<#
                            }
                            foreach (IndexMapping mapping in mType.IndexMapping)
                            {
                                #>

                    <#= mapping.FormatMapping(Case.CamelCase, "element", "gameSetup", "gameState") #><#
                                if (m.Array == 0)
                                {
                                    #> = element;<#
                                }
                                else if (m.Array == 1)
                                {
                                    #>.Add(element);<#
                                }
                                else
                                {
                                    throw new Exception("Unsupported arity > 1 for mapping");
                                }
                            }
                        }
                    }
                        #>

                    data.<#= Case.CamelCase.Convert(m.Name) #>[idx0<#
                    for (int i = 1; i < m.Array; ++i)
                    {
                        #>, idx<#= i #><#
                    }
                    #>] = <#
                    if (type == BasicType.Class)
                    {
                        #>element<#
                    }
                    else
                    {
                        #>ReadNext<#= Case.CamelCase.Convert(CsHelper.GetBasicTypeName(type)) #>()<#
                    }
                    #>;<#
                
                    for (int i = 0; i < m.Array; ++i)
                    {
                        this.PopIndent();
                        #>

                    }<#
                    }
                }
                #>

                }<#

            }         
            #>
           
            }<#
        }
        #>

        }
    }
}