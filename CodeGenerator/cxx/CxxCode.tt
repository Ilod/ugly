<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "<#= Case.CamelCase.Convert(CxxHelper.CurrentFile.Name) #>.h"
#include "<#= CxxHelper.Server ? "Serializer" : "Client" #>.h"
#include <cstdio><#
if (CxxHelper.Server)
{
    #>


namespace ugly
{<#
    this.PushIndent("    ");
}
#>

namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
{<#
    foreach (GameClass c in CxxHelper.CurrentFile.Class)
    {
    #>

    <#= Case.CamelCase.Convert(c.Name) #>::<#= Case.CamelCase.Convert(c.Name) #>()<#
        for (int i = 0; i < c.Member.Count; ++i)
        {
            #>

        <#
            if (i == 0)
            {
                #>:<#
            }
            else
            {
                #>,<#
            }
            #> <#= Case.LowerCamelCase.Convert(c.Member[i].Name) #>()<#
        }
        #>

    { }
        <#
        foreach (ClassMethod m in c.Method)
        {
            #>

    <#
            if (CxxHelper.Server)
            {
                #>bool<#
            }
            else
            {
                #>void<#
            }
            #> <#= Case.CamelCase.Convert(c.Name) #>::<#= Case.CamelCase.Convert(m.Name) #>(<#
            if (CxxHelper.Server)
            {
                #>struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState<#= m.Param.Any() ? ", " : "" #><#
            }
            for (int idxParam = 0; idxParam < m.Param.Count; ++idxParam)
            {
                MethodParam a = m.Param[idxParam];
                BasicType type = CxxHelper.Definition.GetBasicType(a.Type);
                if (idxParam != 0)
                {
                    #>, <#
                }
                if (type == BasicType.Class)
                {
                    #>const <#
                }
                if (type.IsBasic())
                {
                    #><#= CxxHelper.GetBasicTypeName(type) #><#
                }
                else
                {
                    #><#= Case.CamelCase.Convert(a.Type) #><#
                }
                if (type == BasicType.Class)
                {
                    #>&<#
                }
                #> <#= Case.LowerCamelCase.Convert(a.Name) #><#
            }
            #>)
    {<#
            if (CxxHelper.Server)
            {
                #>

        return false;<#
            }
            else
            {
                #>

        std::printf("<#= m.MethodId #><#
            foreach (MethodParam a in m.Param)
            {
                #> <#= CxxHelper.GetSerializedFormatString(a.Type) #><#
            }
            #>\n"<#
            foreach (MethodParam a in m.Param)
            {
                #>, <#= CxxHelper.GetSerializedMemberString("", a.Type, Case.LowerCamelCase.Convert(a.Name)) #><#
            }
            #>);<#
            }#>

    }<#
        }
        if (CxxHelper.Server)
        {
            foreach (string m in c.ConditionMethod)
            {
                #>


    bool <#= Case.CamelCase.Convert(c.Name) #>::<#= Case.CamelCase.Convert(m) #>(struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
    {
        return true;
    }<#
            }
        }
    }
    #>

}<#
if (CxxHelper.Server)
{
    this.PopIndent();
    #>

}<#
}
#>