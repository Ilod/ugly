<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include "Serializer.h"
#include "GameServer/Game.h"

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        class <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #> : public ugly::server::GameBase
        {
        protected:
            void InitGame() override;
            std::string GetGameSetup(int player) override { return Serializer::SerializeSetup(gameSetup, gameSetup.player[player], gameState, gameState.player[player]); }
            std::string GetGameState(int player) override { return Serializer::SerializeState(gameSetup, gameSetup.player[player], gameState, gameState.player[player]); }
            void PlayTurn() override;
            ugly::server::GameResult ComputeScore() override;
            bool ShouldPlay() override;
            bool CanPlayThisTurn(int player) override;
            std::chrono::milliseconds GetNextTurnTimeLimit(int player) override;
            std::chrono::milliseconds GetSetupTimeLimit(int player) override;
            std::chrono::milliseconds GetCleanupTimeLimit(int player) override;
            bool ExecuteOrder(const std::string& order, int player) override { return Serializer::ExecuteOrder(order, gameSetup, gameSetup.player[player], gameState, gameState.player[player]); }
        private:
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #> gameSetup;
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #> gameState;
        };
    }
}