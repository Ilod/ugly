<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include "Serializer.h"
#include "../GameServer/Game.h"

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        class <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>: public ugly::server::Game
        {
        protected:
            void InitGame() override;
            std::string GetGameSetup() override { return serializer.Serialize(gameSetup); }
            std::string GetGameState() override { return serializer.Serialize(gameState); }
            void PlayTurn() override;
            ugly::server::GameResult ComputeScore() override;
            bool ShouldPlay() override;
            std::chrono::milliseconds GetNextTurnTimeLimit(int player) override;
            std::chrono::milliseconds GetSetupTimeLimit(int player) override;
            std::chrono::milliseconds GetCleanupTimeLimit(int player) override;
        private:
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #> gameSetup;
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #> gameState;
            Serializer serializer;
        };
    }
}