<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include <vector>
#include <cstdint><#
if (CxxHelper.Server)
{
    #>

#include "<#= Case.CamelCase.Convert(CxxHelper.CurrentFile.Name) #>Private.h"<#
}
ISet<string> weak = new SortedSet<string>();
ISet<string> strong = new SortedSet<string>();
foreach (GameClass c in CxxHelper.CurrentFile.Class)
{
    foreach (ClassMember m in c.Member)
    {
        BasicType type = CxxHelper.Definition.GetBasicType(m.Type);
        if (type.IsBasic())
            continue;
        if (type == BasicType.Class)
        {
            if (m.IsWeak)
            {
                weak.Add(m.Type);
            }
            else
            {
                strong.Add(CxxHelper.Definition.Class[m.Type].File.Name);
            }
        }
        else if (type == BasicType.Enum)
        {
            strong.Add(CxxHelper.Definition.Enum[m.Type].File.Name);
        }
    }
    foreach (ClassMethod m in c.Method)
    {
        foreach (MethodParam a in m.Param)
        {
            BasicType type = CxxHelper.Definition.GetBasicType(a.Type);
            if (type.IsBasic())
                continue;
            if (type == BasicType.Class)
            {
                weak.Add(a.Type);
            }
            else if (type == BasicType.Enum)
            {
                strong.Add(CxxHelper.Definition.Enum[a.Type].File.Name);
            }
        }
    }
}
strong.Remove(CxxHelper.CurrentFile.Name);
foreach (string file in strong)
{
    #>

#include "<#= Case.CamelCase.Convert(file) #>.h"<#
}

if (CxxHelper.Server)
{
    #>


namespace ugly
{<#
    this.PushIndent("    ");
}
#>

namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
{<#
    foreach (string s in weak)
    {
        string file = CxxHelper.Definition.Class[s].File.Name;
        if (file == CxxHelper.CurrentFile.Name)
            continue;
        if (strong.Contains(file))
            continue;
        #>

    struct <#= Case.CamelCase.Convert(s) #>;<#
    }

    foreach (GameConstantContainer c in CxxHelper.CurrentFile.ConstantContainer)
    {
        #>

    namespace <#= Case.CamelCase.Convert(c.Name) #>
    {<#
        foreach (GameConstant gc in c.Constant)
        {
            #>

        static const <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(gc.Type)) #> <#= Case.CamelCase.Convert(gc.Name) #> = <#= gc.Value #>;<#
        }
        #>

    }<#
    }


    foreach (GameEnum e in CxxHelper.CurrentFile.Enum)
    {
    #>

    
    enum class <#= Case.CamelCase.Convert(e.Name) #>
    {<#
        foreach (KeyValuePair<string, int> kvp in e.Value)
        {
        #>
        
        <#= Case.CamelCase.Convert(kvp.Key) #> = <#= kvp.Value #>,<#
        }
        #>

    };<#
    }
    
    foreach (GameClass c in CxxHelper.CurrentFile.Class)
    {
    #>


    struct <#= Case.CamelCase.Convert(c.Name) #>
    {<#
        foreach (ClassMember m in c.Member)
        {
            #>

        <#
            for (int i = 0; i < m.Array; ++i)
            {
                #>std::vector<<#
            }
            BasicType type = CxxHelper.Definition.GetBasicType(m.Type);
            if (type.IsBasic())
            {
                #><#= CxxHelper.GetBasicTypeName(type) #><#
            }
            else
            {
                #><#= Case.CamelCase.Convert(m.Type) #><#
            }
            if (m.IsWeak)
            {
                #>*<#
            }
            for (int i = 0; i < m.Array; ++i)
            {
                #>><#
            }
            #> <#= Case.LowerCamelCase.Convert(m.Name) #>;<#
        }

        if (CxxHelper.Server)
        {
            #>

        <#= Case.CamelCase.Convert(c.Name) #>Private additionalData;<#
        }
        #>
        

        <#
        foreach (GameConstant gc in c.Constant)
        {
            #>

        static const <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(gc.Type)) #> <#= Case.CamelCase.Convert(gc.Name) #> = <#= gc.Value #>;<#
        }
        #>


        <#= Case.CamelCase.Convert(c.Name) #>();
        <#
        foreach (ClassMethod m in c.Method)
        {
            if (CxxHelper.Server)
            {
                #>

        bool<#
            }
            else
            {
                #>

        void<#
            }
            #> <#= Case.CamelCase.Convert(m.Name) #>(<#
            if (CxxHelper.Server)
            {
                #>struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState<#= m.Param.Any() ? ", " : "" #><#
            }
            for (int idxParam = 0; idxParam < m.Param.Count; ++idxParam)
            {
                MethodParam a = m.Param[idxParam];
                BasicType type = CxxHelper.Definition.GetBasicType(a.Type);
                if (idxParam != 0)
                {
                    #>, <#
                }
                if (type == BasicType.Class && !CxxHelper.Server)
                {
                    #>const <#
                }
                if (type.IsBasic())
                {
                    #><#= CxxHelper.GetBasicTypeName(type) #><#
                }
                else
                {
                    #><#= Case.CamelCase.Convert(a.Type) #><#
                }
                if (type == BasicType.Class)
                {
                    #>&<#
                }
                #> <#= Case.LowerCamelCase.Convert(a.Name) #><#
            }
            if (CxxHelper.Server)
            {
                #>, const std::string& orderStr<#
            }
            #>);<#
        }
        if (CxxHelper.Server)
        {
            if (c.ConditionMethod.Any())
            {
                #>

<#
            }
            foreach (Tuple<string, int> m in c.ConditionMethod)
            {
                #>

        bool <#= Case.CamelCase.Convert(m.Item1) #>(struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, struct <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState<#
                for (int i = 0; i < m.Item2; ++i)
                {
                    #>, int idx<#= i #><#
                }
                #>);<#
            }
        }
        #>

    };<#
    }
    #>

}<#
if (CxxHelper.Server)
{
    this.PopIndent();
    #>

}<#
}
#>