<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include <map><#
foreach (GameFile file in CxxHelper.Definition.Files)
{
    #>

#include "<#= Case.CamelCase.Convert(file.Name) #>.h"<#
}
#>

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        class Serializer
        {
        public:
            static std::string SerializeState(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            static std::string SerializeSetup(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            static bool ExecuteOrder(const std::string& order, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, int playerId);<#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.HasId && !c.Id.Index)
    {
        #>

            static <#= Case.CamelCase.Convert(c.Name) #>* Find<#= Case.CamelCase.Convert(c.Name) #>(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            BasicType memberType = CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type);
            if (memberType.IsBasic())
            {
                #>, <#= CxxHelper.GetBasicTypeName(memberType) #><#
            }
            else
            {
                #>, const <#= Case.CamelCase.Convert(c.MemberMap[c.Id.Member[i]].Type) #>&<#
            }
            #> <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
        #>);<#
    }
}
    #>

        };
    }
}