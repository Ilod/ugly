<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once
#include <map><#
foreach (GameFile file in CxxHelper.Definition.Files)
{
    #>

#include "<#= Case.CamelCase.Convert(file.Name) #>.h"<#
}
#>

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        class Serializer
        {
        public:
            std::string SerializeState(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            std::string SerializeSetup(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            bool ExecuteOrder(const std::string& order, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, int playerId);
            
            class IdMap
            {
            public:<#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.HasId && !c.Id.Index)
    {
        if (c.Id.Member.Count != 1)
        {
            throw new Exception("Only arity 1 for non-indexed id is supported");
        }
        #>

                std::map<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[0]].Type)) #>, <#= Case.CamelCase.Convert(c.Name) #>*> <#= Case.LowerCamelCase.Convert(c.Name) #>;<#
    }
}
#>

                void Clear();
            };
        private:
            IdMap gameSetupId;
            IdMap gameStateId;
        };
    }
}