<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Client.h"
#include <string>
#include <iostream>
#include <cstdint>
#include <cctype>
#include <sstream>

namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
{
    GameClient::~GameClient() {}

    namespace
    {
        <# this.PushIndent("        "); #>
<#@ include file="CxxDeserializerInc.tt" #>
        <# this.PopIndent(); #>

    }
    
    void GameServer::Play(GameClient& client)
    {
        std::string line;
        std::getline(std::cin, line);
        const char* buf = line.c_str();
        int playerId = ReadNext<int>(buf);
        std::getline(std::cin, line);
        buf = line.c_str();
        <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #> data;
        Deserialize(data, buf, &data, nullptr);
        client.InitGame(data, data.player[playerId]);
        for (;;)
        {
            printf("EOT\n");
            std::getline(std::cin, line);
            if (line.compare(0, 3, "EOT") == 0)
                break;
            buf = line.c_str();
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #> turn;
            Deserialize(turn, buf, &data, &turn);
            client.PlayTurn(turn, turn.player[playerId]);
        }
        client.Cleanup();
        printf("EOT\n");
    }

    std::vector<std::pair<int, int>> GameServer::PlayLocalServer(GameClient& client, const std::string& serverPath, const std::vector<std::string>& otherPlayers, const std::string& game, const std::string& serverArgs)
    {
        std::stringstream commandLine;
        commandLine << '"' << serverPath << "\" -game \"" << game << "\" -player parent;";
        for (const std::string& player : otherPlayers)
            commandLine << " -player \"" << player << '"';
        if (!serverArgs.empty())
            commandLine << ' ' << serverArgs;
        return PlayLocalServerCommandLine(client, commandLine.str());
    }

    std::vector<std::pair<int, int>> GameServer::PlayLocalServerCommandLine(GameClient& client, const std::string& commandLine)
    {
        if (!StartLocalServer(commandLine))
            return {};
        Play(client);
        std::string line;
        std::getline(std::cin, line);
        const char* buf = line.c_str();
        std::vector<std::pair<int, int>> results;
        for (;;)
        {
            int rank = ReadNext<int>(buf);
            if (rank == 0)
                return results;
            results.push_back({rank, ReadNext<int>(buf)});
        }
    }
}