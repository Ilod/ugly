<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Client.h"
#include <string>
#include <iostream>
#include <cstdint>
#include <cctype>
#include <sstream>

namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
{
    GameClient::~GameClient() {}

    namespace
    {
        template<class T> T ReadNext(const char*& buf)
        {
            std::uint64_t data = 0;
            bool negative = false;
            if (*buf == '-')
            {
                negative = true;
                ++buf;
            }
            while (std::isdigit(*buf))
            {
                data *= 10;
                data += ((*buf) - '0');
                ++buf;
            }
            if (*buf)
                ++buf;
            if (negative)
                return static_cast<T>(-static_cast<std::int64_t>(data));
            return static_cast<T>(data);
        }

        template<class T> void Deserialize(T& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState)
        {
            data = ReadNext<T>(buf);
        }<#
    foreach (GameClass c in CxxHelper.Definition.Class.Values)
    {
        #>

        template<> void Deserialize(<#= Case.CamelCase.Convert(c.Name) #>& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState);<#
    }
    foreach (GameClass c in CxxHelper.Definition.Class.Values)
    {
        #>


        template<> void Deserialize(<#= Case.CamelCase.Convert(c.Name) #>& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState)
        {<#
        foreach (ClassMember m in c.Member)
        {
            if ((c.HasId && c.Id.Index && c.Id.Member.Contains(m.Name)) || (m.Index == ClassMemberIndexType.MappedFromStrong))
            {
                continue;
            }
            #>

            {
                auto& member = data.<#= Case.LowerCamelCase.Convert(m.Name) #>;<#

            if (m.IsWeak)
            {
                GameClass realType = CxxHelper.Definition.Class[m.Type];
                for (int i = 0; i <= realType.Id.Member.Count; ++i)
                {
                    #>

                int classIdx<#= i #> = ReadNext<int>();<#
                }
                #>
                            
                if (classIdx0 != -1)
                {
                    member = &<#= realType.Id.Source.FormatMapping(Case.LowerCamelCase, null, "(*gameSetup)", "(*gameState)") #><#
                for (int i = 0; i <= c.Id.Member.Count; ++i)
                {
                    #>[classIdx<#= i #>]<#
                }
                #>;
                }<#
            }
            else
            {
                for (int i = 0; i < m.Array; ++i)
                {
                    #>

                int size<#= i #> = ReadNext<int>(buf);<#
                }
                if (m.Array != 0)
                {
                    #>

                auto& array0 = member;
                array0.resize(size0);<#
                }
                for (int i = 1; i < m.Array; ++i)
                {
                    #>

                for (int idx<#= i - 1 #> = 0; i < size<#= i - 1 #>; ++i)
                {
                    auto& array<#= i #> = array<#= i - 1 #>[idx<#= i - 1 #>];
                    array<#= i #>.resize(size<#= i #>);<#
                    this.PushIndent("    ");
                }
                for (int i = 1; i < m.Array; ++i)
                {
                    this.PopIndent();
                    #>

                }<#
                }
                for (int i = 0; i < m.Array; ++i)
                {
                    #>

                for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                {
                    auto& array<#= i + 1 #> = array<#= i #>[idx<#= i #>];<#
                    this.PushIndent("    ");
                }
                if (m.Array != 0)
                {
                #>

                    Deserialize(array<#= m.Array #>, buf, gameSetup, gameState);<#
                    if (m.Index == ClassMemberIndexType.Strong)
                    {
                        GameClass mType = CxxHelper.Definition.Class[m.Type];
                        if (mType.HasId && mType.Id.Index)
                        {
                            for (int i = 0; i < mType.Id.Member.Count; ++i)
                            {
                                #>

                    array<#= m.Array #>.<#= Case.LowerCamelCase.Convert(mType.Id.Member[i]) #> = idx<#= i #>;<#
                            }
                            foreach (IndexMapping mapping in mType.IndexMapping)
                            {
                                #>

                    <#= mapping.FormatMapping(Case.LowerCamelCase, string.Format("array{0}", m.Array), "(*gameSetup)", "(*gameState)") #><#
                                if (m.Array == 0)
                                {
                                    #> = &array<#= m.Array #>;<#
                                }
                                else if (m.Array == 1)
                                {
                                    #>.push_back(&array<#= m.Array #>);<#
                                }
                                else
                                {
                                    throw new Exception("Unsupported arity > 1 for mapping");
                                }
                            }
                        }
                    }
                }
                else
                {
                #>

                Deserialize(member, buf, gameSetup, gameState);<#
                }
                for (int i = 0; i < m.Array; ++i)
                {
                    this.PopIndent();
                #>

                }<#
                }
            }
            #>

            }<#
        }
        #>

        }<#
        
    }
    #>

    }

    void GameServer::Play(GameClient& client)
    {
        std::string line;
        std::getline(std::cin, line);
        const char* buf = line.c_str();
        int playerId = ReadNext<int>(buf);
        std::getline(std::cin, line);
        buf = line.c_str();
        <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #> data;
        Deserialize(data, buf, &data, nullptr);
        client.InitGame(data, data.player[playerId]);
        for (;;)
        {
            printf("EOT\n");
            std::getline(std::cin, line);
            if (line.compare(0, 3, "EOT") == 0)
                break;
            buf = line.c_str();
            <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #> turn;
            Deserialize(turn, buf, &data, &turn);
            client.PlayTurn(turn, turn.player[playerId]);
        }
        client.Cleanup();
        printf("EOT\n");
    }

    std::vector<std::pair<int, int>> GameServer::PlayLocalServer(GameClient& client, const std::string& serverPath, const std::vector<std::string>& otherPlayers, const std::string& game, const std::string& serverArgs)
    {
        std::stringstream commandLine;
        commandLine << '"' << serverPath << "\" -game \"" << game << "\" -player parent;";
        for (const std::string& player : otherPlayers)
            commandLine << " -player \"" << player << '"';
        if (!serverArgs.empty())
            commandLine << ' ' << serverArgs;
        return PlayLocalServerCommandLine(client, commandLine.str());
    }

    std::vector<std::pair<int, int>> GameServer::PlayLocalServerCommandLine(GameClient& client, const std::string& commandLine)
    {
        if (!StartLocalServer(commandLine))
            return {};
        Play(client);
        std::string line;
        std::getline(std::cin, line);
        const char* buf = line.c_str();
        std::vector<std::pair<int, int>> results;
        for (;;)
        {
            int rank = ReadNext<int>(buf);
            if (rank == 0)
                return results;
            results.push_back({rank, ReadNext<int>(buf)});
        }
    }
}