<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Serializer.h"
#include <sstream>

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        void Serializer::Clear()
        {<#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.IdMember != null)
    {
        #>

                <#= Case.LowerCamelCase.Convert(c.Name) #>.clear();<#
    }
}
#>

        }

        namespace
        {
            template<class T> T ReadNext(const char*& buf)
            {
                std::uint64_t data = 0;
                bool negative = false;
                if (*buf == '-')
                {
                    negative = true;
                    ++buf;
                }
                while (std::isdigit(*buf))
                {
                    data *= 10;
                    data += ((*buf) - '0');
                }
                if (*buf)
                    ++buf;
                if (negative)
                    return static_cast<T>(-static_cast<std::int64_t>(data));
                return static_cast<T>(data);
            }

            template<typename T> void SerializeInternal(T& data, std::stringstream& buffer, Serializer::IdMap& ids);<#
            
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    #>


            template<> void SerializeInternal(<#= Case.CamelCase.Convert(c.Name) #>& data, std::stringstream& buffer, Serializer::IdMap& ids)
            {<#
    if (c.IdMember != null)
    {
        #>

                ids.<#= Case.LowerCamelCase.Convert(c.Name) #>[data.<#= Case.LowerCamelCase.Convert(c.IdMember.Name) #>] = &data;<#
    }
    foreach (ClassMember m in c.Member)
    {
        #>

                {<#
        if (m.Array != 0)
        {
            for (int i = 0; i < m.Array; ++i)
            {
                #>

                    int size<#= i #> = <#
                if (i != 0)
                {
                    #>size<#= i - 1 #> == 0 ? 0 : <#
                }
                #>data.<#= Case.LowerCamelCase.Convert(m.Name) #><#
                for (int j = 0; j < i; ++j)
                {
                    #>[0]<#
                }
                #>.size();
                    buffer << size<#= i #> << " ";<#
            }
        }
        string arrayIdxSuffix = "";
        for (int i = 0; i < m.Array; ++i)
        {
            #>

                    for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                    {<#
            this.PushIndent("    ");
            arrayIdxSuffix += string.Format("[idx{0}]", i);
        }
        switch (CxxHelper.Definition.GetBasicType(m.Type))
        {
            case BasicType.Char:
            case BasicType.Enum:
                #>
                
                    buffer << (int)data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
            case BasicType.Class:
                #>

                    SerializeInternal(data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>, buffer, ids);<#
                break;
            default:
                #>
                
                    buffer << data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
        }
        for (int i = 0; i < m.Array; ++i)
        {
            this.PopIndent();
            #>

                    }<#
        }
        #>

                }<#
    }
    #>

            }<#
}
#>

        }

        std::string Serializer::Serialize(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup)
        {
            std::stringstream buffer;
            gameSetupId.Clear();
            SerializeInternal(gameSetup, buffer, gameSetupId);
            return buffer.str();
        }

        std::string Serializer::Serialize(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState)
        {
            std::stringstream buffer;
            gameStateId.Clear();
            SerializeInternal(gameState, buffer, gameStateId);
            return buffer.str();
        }

        bool Serializer::ExecuteOrder(const std::string& order, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, int playerId)
        {
            const char* buf = order.c_str();
            int _methodId = ReadNext<int>(buf);
            switch (_methodId)
            {<#
foreach (ClassMethod m in CxxHelper.Definition.Method)
{
    #>
                case <#= m.MethodId #>:
                {<#
    foreach (MethodParam a in m.Param)
    {
    
    }
                #>

                    return false;
                }<#
}
#>
                default:
                    return false;
        }
    }
}