<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Serializer.h"
#include <cctype>
#include <sstream>

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        namespace
        {
            template<typename T> void SerializeInternal(T& data, std::stringstream& buffer, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            <#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    #>

            template<> void SerializeInternal(<#= Case.CamelCase.Convert(c.Name) #>& data, std::stringstream& buffer, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);<#
}
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.Id == null || c.Id.Index)
        continue;
    #>


            template<typename T> <#= Case.CamelCase.Convert(c.Name) #>* Find<#= Case.CamelCase.Convert(c.Name) #>Internal(T& data<#
    for (int i = 0; i < c.Id.Member.Count; ++i)
    {
        #>, <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type)) #> <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
    }
    #>);
    <#
    foreach (GameClass introClass in CxxHelper.Definition.Class.Values)
    {
        #>

            template<> <#= Case.CamelCase.Convert(c.Name) #>* Find<#= Case.CamelCase.Convert(c.Name) #>Internal(<#= Case.CamelCase.Convert(introClass.Name) #>& data<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            #>, <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type)) #> <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
    #>);<#
    }
}
    
            
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    #>


            template<> void SerializeInternal(<#= Case.CamelCase.Convert(c.Name) #>& data, std::stringstream& buffer, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
            {<#
    foreach (ClassMember m in c.Member)
    {
        if ((c.HasId && c.Id.Index && c.Id.Member.Contains(m.Name)) || (m.Index == ClassMemberIndexType.MappedFromStrong))
        {
            continue;
        }
        #>

                {<#
        if (m.Array != 0)
        {
            for (int i = 0; i < m.Array; ++i)
            {
                #>

                    int size<#= i #> = (int)(<#
                if (i != 0)
                {
                    #>size<#= i - 1 #> == 0 ? 0 : <#
                }
                #>data.<#= Case.LowerCamelCase.Convert(m.Name) #><#
                for (int j = 0; j < i; ++j)
                {
                    #>[0]<#
                }
                #>.size());
                    buffer << size<#= i #> << " ";<#
            }
        }
        if (m.Condition != null && m.Condition.Type == ConditionType.While && m.Array != 0)
        {
            #>
                    bool executeLoop = true;<#
        }
        string arrayIdxSuffix = "";
        for (int i = 0; i < m.Array; ++i)
        {
            #>

                    for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                    {<#
            this.PushIndent("    ");
            arrayIdxSuffix += string.Format("[idx{0}]", i);
        }
        if (m.Condition != null)
        {
            #>

                    if (<#
            if (m.Condition.Type == ConditionType.While)
            {
                #>(executeLoop = (executeLoop && <#
            }
            #>data.<#
            if (m.Condition.Context == ConditionContext.Member)
            {
                #><#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>.<#
            }
            #><#= Case.CamelCase.Convert(m.Condition.Function) #>(gameSetup, playerSetup, gameState, playerState<#
            if (m.Condition.Context == ConditionContext.Parent)
            {
                for (int i = 0; i < m.Array; ++i)
                {
                    #>, idx<#= i #><#
                }
            }
            #>))<#
            if (m.Condition.Type == ConditionType.While)
            {
                #>))<#
            }
            #>

                    {<#
            this.PushIndent("    ");
        }
        switch (CxxHelper.Definition.GetBasicType(m.Type))
        {
            case BasicType.Char:
            case BasicType.Enum:
                #>
                
                    buffer << (int)data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
            case BasicType.Class:
                if (m.Index == ClassMemberIndexType.RefId)
                {
                    GameClass mType = CxxHelper.Definition.Class[m.Type];
                    foreach (string mId in mType.Id.Member)
                    {
                        #>

                    if (data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> == nullptr)
                    {
                        buffer << -1 << " ";
                    }
                    else
                    {<#
                        switch (CxxHelper.Definition.GetBasicType(mType.MemberMap[mId].Type))
                        {
                        case BasicType.Char:
                        case BasicType.Enum:
                            #>
                
                        buffer << (int)data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>-><#= Case.LowerCamelCase.Convert(mId) #> << " ";<#
                            break;
                        default:
                            #>
                
                        buffer << data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>-><#= Case.LowerCamelCase.Convert(mId) #> << " ";<#
                            break;
                            
                        }
                        #>

                    }<#
                    }
                }
                else
                {
                    #>

                    SerializeInternal(data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>, buffer, gameSetup, playerSetup, gameState, playerState);<#
                }
                break;
            default:
                #>

                    buffer << data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
        }
        if (m.Condition != null)
        {
            this.PopIndent();
            #>

                    }<#
            if (m.Condition.DefaultValue != null)
            {
                #>

                    else
                    {<#
                switch (CxxHelper.Definition.GetBasicType(m.Type))
                {
                    case BasicType.Enum:
                        #>

                        buffer << (int)<#= Case.CamelCase.Convert(m.Type) #>::<#= Case.CamelCase.Convert(m.Condition.DefaultValue) #> << " ";<#
                        break;
                    case BasicType.Bool:
                        #>

                        buffer << <#= string.Equals(m.Condition.DefaultValue, "true", StringComparison.OrdinalIgnoreCase) ? 1 : 0 #> << " ";<#
                        break;
                    case BasicType.Char:
                        #>

                        buffer << '<#= m.Condition.DefaultValue #>' << " ";<#
                        break;
                    default:
                        #>

                        buffer << <#= m.Condition.DefaultValue #> << " ";<#
                        break;
                }#>

                    }<#
            }
        }
        for (int i = 0; i < m.Array; ++i)
        {
            this.PopIndent();
            #>

                    }<#
        }
        #>

                }<#
    }
    #>

            }<#
}

foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.Id == null || c.Id.Index)
        continue;
    foreach (GameClass introClass in CxxHelper.Definition.Class.Values)
    {
        #>

            template<> <#= Case.CamelCase.Convert(c.Name) #>* Find<#= Case.CamelCase.Convert(c.Name) #>Internal(<#= Case.CamelCase.Convert(introClass.Name) #>& data<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            #>, <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type)) #> <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
        #>)
            {<#
        if (introClass == c)
        {
            #>

                if (data.<#= Case.LowerCamelCase.Convert(c.Id.Member[0]) #> == <#= Case.LowerCamelCase.Convert(c.Id.Member[0]) #><#
            for (int i = 1; i < c.Id.Member.Count; ++i)
            {
                #> && data.<#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #> == <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
            }
            #>)
                    return &data;<#
        }
        foreach (ClassMember m in introClass.Member)
        {
            if (CxxHelper.Definition.GetBasicType(m.Type) != BasicType.Class || m.IsWeak)
                continue;
            if (m.Array == 0)
            {
                #>

                if (<#= Case.CamelCase.Convert(c.Name) #>* res = Find<#= Case.CamelCase.Convert(c.Name) #>Internal(data.<#= Case.LowerCamelCase.Convert(m.Name) #><#
                foreach (string idMember in c.Id.Member)
                {
                    #>, <#= Case.LowerCamelCase.Convert(idMember) #><#
                }
                #>))
                    return res;<#
            }
            else
            {
                #>

                {
                    auto& memberArray0 = data.<#= Case.LowerCamelCase.Convert(m.Name) #>;<#
                for (int i = 0; i < m.Array; ++i)
                {
                        #>

                    for (auto& memberArray<#= i + 1 #> : memberArray<#= i #>)
                    {<#
                    this.PushIndent("    ");
                }
                #>

                    if (<#= Case.CamelCase.Convert(c.Name) #>* res = Find<#= Case.CamelCase.Convert(c.Name) #>Internal(memberArray<#= m.Array #><#
                foreach (string idMember in c.Id.Member)
                {
                    #>, <#= Case.LowerCamelCase.Convert(idMember) #><#
                }
                #>))
                        return res;<#
                for (int i = 0; i < m.Array; ++i)
                {
                    this.PopIndent();
                    #>

                    }<#
                }
                #>

                }<#
            }
        }
        #>
                return nullptr;
            }
<#
    }
}

this.PushIndent("            ");
#>


<#@ include file="CxxDeserializerInc.tt" #><#
this.PopIndent();
#>

        }
        
        std::string Serializer::SerializeSetup(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
        {
            std::stringstream buffer;
            buffer << playerSetup.id << '\n';
            SerializeInternal(gameSetup, buffer, gameSetup, playerSetup, gameState, playerState);
            buffer << '\n';
            return buffer.str();
        }

        std::string Serializer::SerializeState(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
        {
            std::stringstream buffer;
            SerializeInternal(gameState, buffer, gameSetup, playerSetup, gameState, playerState);
            buffer << '\n';
            return buffer.str();
        }<#

foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.HasId && !c.Id.Index)
    {
        #>


        <#= Case.CamelCase.Convert(c.Name) #>* Serializer::Find<#= Case.CamelCase.Convert(c.Name) #>(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            BasicType memberType = CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type);
            if (memberType.IsBasic())
            {
                #>, <#= CxxHelper.GetBasicTypeName(memberType) #><#
            }
            else
            {
                #>, const <#= Case.CamelCase.Convert(c.MemberMap[c.Id.Member[i]].Type) #>&<#
            }
            #> <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
        #>)
        {
            if (<#= Case.CamelCase.Convert(c.Name) #>* res = Find<#= Case.CamelCase.Convert(c.Name) #>Internal(gameState<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            #>, <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
        #>))
                return res;
            return Find<#= Case.CamelCase.Convert(c.Name) #>Internal(gameSetup<#
        for (int i = 0; i < c.Id.Member.Count; ++i)
        {
            #>, <#= Case.LowerCamelCase.Convert(c.Id.Member[i]) #><#
        }
        #>);
        }<#
    }
}
#>


        bool Serializer::ExecuteOrder(const std::string& order, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, int currentPlayerId)
        {
            const char* buf = order.c_str();
            int _methodId = ReadNext<int>(buf);
            switch (_methodId)
            {<#
    foreach (GameFile f in CxxHelper.Definition.Files)
    {
        foreach (GameClass c in f.Class)
        {
            foreach (ClassMethod m in c.Method)
            {
                #>

                case <#= m.MethodId #>: // <#= Case.CamelCase.Convert(c.Name) #>::<#= Case.CamelCase.Convert(m.Name) #>
                {<#
                if (c.Id.Index)
                {
                    foreach (string deserializeStr in CxxHelper.GetDeserializeIndexedClass(c, "argThis", "gameSetup", "gameState", false))
                    {
                        #>

                    <#= deserializeStr #><#
                    }
                }
                else
                {
                    for (int i = 0; i < c.Id.Member.Count; ++i)
                    {
                        #>

                    <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type)) #> argThisId<#= i #> = ReadNext<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[i]].Type)) #>>(buf);<#
                    }
                    #>

                    <#= Case.CamelCase.Convert(c.Name) #>* argThisPtr = Find<#= Case.CamelCase.Convert(c.Name) #>(gameSetup, gameState<#
                    for (int i = 0; i < c.Id.Member.Count; ++i)
                    {
                        #>, argThisId<#= i #><#
                    }
                    #>);

                    if (!argThisPtr)
                        return false;
                    <#= Case.CamelCase.Convert(c.Name) #>& argThis = *argThisPtr;<#
                }
                foreach (MethodParam a in m.Param)
                {
                    BasicType type = CxxHelper.Definition.GetBasicType(a.Type);
                    if (type == BasicType.Class)
                    {
                        GameClass aType = CxxHelper.Definition.Class[a.Type];
                        if (!aType.HasId)
                        {
                            #>
                            
                    <#= Case.CamelCase.Convert(a.Type) #> <#= Case.LowerCamelCase.Convert(a.Name) #>;
                    Deserialize(<#= Case.LowerCamelCase.Convert(a.Name) #>, buf, &gameSetup, &gameState);<#
                        }
                        else if (aType.Id.Index)
                        {
                            foreach (string deserializeStr in CxxHelper.GetDeserializeIndexedClass(aType, Case.LowerCamelCase.Convert(a.Name), "gameSetup", "gameState", false))
                            {
                                #>

                            <#= deserializeStr #><#
                            }
                        }
                        else
                        {
                            for (int i = 0; i < aType.Id.Member.Count; ++i)
                            {
                                #>

                    <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(aType.MemberMap[aType.Id.Member[i]].Type)) #> <#= Case.LowerCamelCase.Convert(a.Name) #>_id<#= i #> = ReadNext<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(aType.MemberMap[aType.Id.Member[i]].Type)) #>>(buf);<#
                            }
                            #>

                    auto <#= Case.LowerCamelCase.Convert(a.Name) #>_ptr = Find<#= Case.CamelCase.Convert(a.Type) #>(gameSetup, gameState<#
                            for (int i = 0; i < aType.Id.Member.Count; ++i)
                            {
                                #>, <#= Case.LowerCamelCase.Convert(a.Name) #>_id<#= i #><#
                            }
                            #>);
                    if (!<#= Case.LowerCamelCase.Convert(a.Name) #>_ptr)
                        return false;
                    <#= Case.CamelCase.Convert(a.Type) #>& <#= Case.LowerCamelCase.Convert(a.Name) #> = *(<#= Case.LowerCamelCase.Convert(a.Name) #>_ptr);<#
                        }
                    }
                    else if (type == BasicType.Enum)
                    {
                        #>

                    <#= Case.CamelCase.Convert(a.Type) #> <#= Case.LowerCamelCase.Convert(a.Name) #> = ReadNext<<#= Case.CamelCase.Convert(a.Type) #>>(buf);<#
                    }
                    else
                    {
                        #>

                    <#= CxxHelper.GetBasicTypeName(type) #> <#= Case.LowerCamelCase.Convert(a.Name) #> = ReadNext<<#= CxxHelper.GetBasicTypeName(type) #>>(buf);<#
                    }
                }
                #>

                    return argThis.<#= Case.CamelCase.Convert(m.Name) #>(gameSetup, gameSetup.player[currentPlayerId], gameState, gameState.player[currentPlayerId]<#
                foreach (MethodParam a in m.Param)
                {
                    #>, <#= Case.LowerCamelCase.Convert(a.Name) #><#
                }
                #>);
                }<#
            }
        }
    }#>

                default:
                    return false;
            }
        }
    }
}