<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Serializer.h"
#include <cctype>
#include <sstream>

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        void Serializer::IdMap::Clear()
        {<#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (c.HasId && !c.Id.Index)
    {
        #>

            <#= Case.LowerCamelCase.Convert(c.Name) #>.clear();<#
    }
}
#>

        }

        namespace
        {
            template<typename T> void SerializeInternal(T& data, std::stringstream& buffer, Serializer::IdMap& ids, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);
            <#
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    #>

            template<> void SerializeInternal(<#= Case.CamelCase.Convert(c.Name) #>& data, std::stringstream& buffer, Serializer::IdMap& ids, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState);<#
}
            
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    #>


            template<> void SerializeInternal(<#= Case.CamelCase.Convert(c.Name) #>& data, std::stringstream& buffer, Serializer::IdMap& ids, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
            {<#
    if (c.HasId && !c.Id.Index)
    {
        #>

                ids.<#= Case.LowerCamelCase.Convert(c.Name) #>[data.<#= Case.LowerCamelCase.Convert(c.Id.Member[0]) #>] = &data;<#
    }
    foreach (ClassMember m in c.Member)
    {
        if ((c.HasId && c.Id.Index && c.Id.Member.Contains(m.Name)) || (m.Index == ClassMemberIndexType.MappedFromStrong))
        {
            continue;
        }
        #>

                {<#
        if (m.Array != 0)
        {
            for (int i = 0; i < m.Array; ++i)
            {
                #>

                    int size<#= i #> = (int)(<#
                if (i != 0)
                {
                    #>size<#= i - 1 #> == 0 ? 0 : <#
                }
                #>data.<#= Case.LowerCamelCase.Convert(m.Name) #><#
                for (int j = 0; j < i; ++j)
                {
                    #>[0]<#
                }
                #>.size());
                    buffer << size<#= i #> << " ";<#
            }
        }
        if (m.Condition != null && m.Condition.Type == ConditionType.While && m.Array != 0)
        {
            #>
                    bool executeLoop = true;<#
        }
        string arrayIdxSuffix = "";
        for (int i = 0; i < m.Array; ++i)
        {
            #>

                    for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
                    {<#
            this.PushIndent("    ");
            arrayIdxSuffix += string.Format("[idx{0}]", i);
        }
        switch (CxxHelper.Definition.GetBasicType(m.Type))
        {
            case BasicType.Char:
            case BasicType.Enum:
                #>
                
                    buffer << (int)data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
            case BasicType.Class:
                if (m.Condition != null)
                {
                    #>
                    
                    if (<#
                    if (m.Condition.Type == ConditionType.While)
                    {
                        #>(executeLoop = (executeLoop && <#
                    }
                    #>data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>.<#= Case.CamelCase.Convert(m.Condition.Function) #>(gameSetup, playerSetup, gameState, playerState))<#
                    if (m.Condition.Type == ConditionType.While)
                    {
                        #>))<#
                    }
                    #>

                    {<#
                    this.PushIndent("    ");
                }
                if (m.Index == ClassMemberIndexType.RefId)
                {
                    GameClass mType = CxxHelper.Definition.Class[m.Type];
                    foreach (string mId in mType.Id.Member)
                    {
                        #>

                    if (data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> == nullptr)
                    {
                        buffer << -1 << " ";
                    }
                    else
                    {<#
                        switch (CxxHelper.Definition.GetBasicType(mType.MemberMap[mId].Type))
                        {
                        case BasicType.Char:
                        case BasicType.Enum:
                            #>
                
                        buffer << (int)data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>-><#= Case.LowerCamelCase.Convert(mId) #> << " ";<#
                            break;
                        default:
                            #>
                
                        buffer << data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>-><#= Case.LowerCamelCase.Convert(mId) #> << " ";<#
                            break;
                            
                        }
                        #>

                    }<#
                    }
                }
                else
                {
                    #>

                    SerializeInternal(data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #>, buffer, ids, gameSetup, playerSetup, gameState, playerState);<#
                }
                if (m.Condition != null)
                {
                    this.PopIndent();
                    #>

                    }<#
                }
                break;
            default:
                #>

                    buffer << data.<#= Case.LowerCamelCase.Convert(m.Name) #><#= arrayIdxSuffix #> << " ";<#
                break;
        }
        for (int i = 0; i < m.Array; ++i)
        {
            this.PopIndent();
            #>

                    }<#
        }
        #>

                }<#
    }
    #>

            }<#
}

this.PushIndent("            ");
#>


<#@ include file="CxxDeserializerInc.tt" #><#
this.PopIndent();
#>

        }
        
        std::string Serializer::SerializeSetup(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
        {
            std::stringstream buffer;
            gameSetupId.Clear();
            buffer << playerSetup.id << '\n';
            SerializeInternal(gameSetup, buffer, gameSetupId, gameSetup, playerSetup, gameState, playerState);
            buffer << '\n';
            return buffer.str();
        }

        std::string Serializer::SerializeState(<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerSetup) #>& playerSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.PlayerState) #>& playerState)
        {
            std::stringstream buffer;
            gameStateId.Clear();
            SerializeInternal(gameState, buffer, gameStateId, gameSetup, playerSetup, gameState, playerState);
            buffer << '\n';
            return buffer.str();
        }

        bool Serializer::ExecuteOrder(const std::string& order, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>& gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>& gameState, int currentPlayerId)
        {
            const char* buf = order.c_str();
            int _methodId = ReadNext<int>(buf);
            switch (_methodId)
            {<#
    foreach (GameFile f in CxxHelper.Definition.Files)
    {
        foreach (GameClass c in f.Class)
        {
            foreach (ClassMethod m in c.Method)
            {
                #>

                case <#= m.MethodId #>: // <#= Case.CamelCase.Convert(c.Name) #>::<#= Case.CamelCase.Convert(m.Name) #>
                {<#
                if (c.Id.Index)
                {
                    foreach (string deserializeStr in CxxHelper.GetDeserializeIndexedClass(c, "argThis", "gameSetup", "gameState", false))
                    {
                        #>

                    <#= deserializeStr #><#
                    }
                }
                else
                {
                    #>
                    
                    <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[0]].Type)) #> argThisId = ReadNext<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(c.MemberMap[c.Id.Member[0]].Type)) #>>(buf);
                    auto argThisIt = gameStateId.<#= Case.LowerCamelCase.Convert(c.Name) #>.find(argThisId);
                    if (argThisIt == gameStateId.<#= Case.LowerCamelCase.Convert(c.Name) #>.end())
                    {
                        argThisIt = gameSetupId.<#= Case.LowerCamelCase.Convert(c.Name) #>.find(argThisId);
                        if (argThisIt == gameSetupId.<#= Case.LowerCamelCase.Convert(c.Name) #>.end())
                            return false;
                    }
                    <#= Case.CamelCase.Convert(c.Name) #>& argThis = *(argThisIt->second);<#
                }
                foreach (MethodParam a in m.Param)
                {
                    BasicType type = CxxHelper.Definition.GetBasicType(a.Type);
                    if (type == BasicType.Class)
                    {
                        GameClass aType = CxxHelper.Definition.Class[a.Type];
                        if (!aType.HasId)
                        {
                            #>
                            
                    <#= Case.CamelCase.Convert(a.Type) #> <#= Case.LowerCamelCase.Convert(a.Name) #>;
                    Deserialize(<#= Case.LowerCamelCase.Convert(a.Name) #>, buf, &gameSetup, &gameState, &gameSetupId, &gameStateId);<#
                        }
                        else if (aType.Id.Index)
                        {
                            foreach (string deserializeStr in CxxHelper.GetDeserializeIndexedClass(aType, Case.LowerCamelCase.Convert(a.Name), "gameSetup", "gameState", false))
                            {
                                #>

                            <#= deserializeStr #><#
                            }
                        }
                        else
                        {
                            #>
                    
                    <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(aType.MemberMap[aType.Id.Member[0]].Type)) #> <#= Case.LowerCamelCase.Convert(a.Name) #>_id = ReadNext<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(aType.MemberMap[aType.Id.Member[0]].Type)) #>>(buf);
                    auto <#= Case.LowerCamelCase.Convert(a.Name) #>_it = gameStateId.<#= Case.LowerCamelCase.Convert(a.Type) #>.find(<#= Case.LowerCamelCase.Convert(a.Name) #>_id);
                    if (<#= Case.LowerCamelCase.Convert(a.Name) #>_it == gameStateId.<#= Case.LowerCamelCase.Convert(a.Type) #>.end())
                    {
                        <#= Case.LowerCamelCase.Convert(a.Name) #>_it = gameSetupId.<#= Case.LowerCamelCase.Convert(a.Type) #>.find(<#= Case.LowerCamelCase.Convert(a.Name) #>_id);
                        if (<#= Case.LowerCamelCase.Convert(a.Name) #>_it == gameSetupId.<#= Case.LowerCamelCase.Convert(a.Type) #>.end())
                            return false;
                    }
                    <#= Case.CamelCase.Convert(a.Type) #>& <#= Case.LowerCamelCase.Convert(a.Name) #> = *(<#= Case.LowerCamelCase.Convert(a.Name) #>_it->second);<#
                        }
                    }
                    else if (type == BasicType.Enum)
                    {
                        #>

                    <#= Case.CamelCase.Convert(a.Type) #> <#= Case.LowerCamelCase.Convert(a.Name) #> = ReadNext<<#= Case.CamelCase.Convert(a.Type) #>>(buf);<#
                    }
                    else
                    {
                        #>

                    <#= CxxHelper.GetBasicTypeName(type) #> <#= Case.LowerCamelCase.Convert(a.Name) #> = ReadNext<<#= CxxHelper.GetBasicTypeName(type) #>>(buf);<#
                    }
                }
                #>

                    return argThis.<#= Case.CamelCase.Convert(m.Name) #>(gameSetup, gameSetup.player[currentPlayerId], gameState, gameState.player[currentPlayerId]<#
                foreach (MethodParam a in m.Param)
                {
                    #>, <#= Case.LowerCamelCase.Convert(a.Name) #><#
                }
                #>);
                }<#
            }
        }
    }#>

                default:
                    return false;
            }
        }
    }
}