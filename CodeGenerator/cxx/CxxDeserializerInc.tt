template<class T> T ReadNext(const char*& buf)
{
    std::uint64_t data = 0;
    bool negative = false;
    if (*buf == '-')
    {
        negative = true;
        ++buf;
    }
    while (std::isdigit(*buf))
    {
        data *= 10;
        data += ((*buf) - '0');
        ++buf;
    }
    if (*buf)
        ++buf;
    if (negative)
        return static_cast<T>(-static_cast<std::int64_t>(data));
    return static_cast<T>(data);
}

template<class T> void Deserialize(T& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState)
{
    data = ReadNext<T>(buf);
}<#

foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (CxxHelper.Server && (c.HasId || !c.IsInMethodParam))
        continue;
    if (!CxxHelper.Server && !c.IsReceivedFromServer)
        continue;
    #>
    
template<> void Deserialize(<#= Case.CamelCase.Convert(c.Name) #>& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState);<#
}
foreach (GameClass c in CxxHelper.Definition.Class.Values)
{
    if (CxxHelper.Server && (c.HasId || !c.IsInMethodParam))
        continue;
    if (!CxxHelper.Server && !c.IsReceivedFromServer)
        continue;
    #>


template<> void Deserialize(<#= Case.CamelCase.Convert(c.Name) #>& data, const char*& buf, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameSetup) #>* gameSetup, <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameState) #>* gameState)
{<#
    foreach (ClassMember m in c.Member)
    {
        if (!CxxHelper.Server && ((c.HasId && c.Id.Index && c.Id.Member.Contains(m.Name)) || (m.Index == ClassMemberIndexType.MappedFromStrong)))
        {
            continue;
        }
        #>

    {
        auto& member = data.<#= Case.LowerCamelCase.Convert(m.Name) #>;<#

        if (m.IsWeak && CxxHelper.Definition.Class[m.Type].Id.Index)
        {
            GameClass realType = CxxHelper.Definition.Class[m.Type];
            foreach (string deserializeStr in CxxHelper.GetDeserializeIndexedClass(realType, "member", "(*gameSetup)", "(*gameState)", true))
            {
                #>

        <#= deserializeStr #><#
            }
        }
        else if (m.IsWeak && !CxxHelper.Definition.Class[m.Type].Id.Index && CxxHelper.Server)
        {
            #>

        {<#
            GameClass memberType = CxxHelper.Definition.Class[m.Type];
            for (int i = 0; i < memberType.Id.Member.Count; ++i)
            {
                #>

            <#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(memberType.MemberMap[memberType.Id.Member[i]].Type)) #> classIdx<#= i #> = ReadNext<<#= CxxHelper.GetBasicTypeName(CxxHelper.Definition.GetBasicType(memberType.MemberMap[memberType.Id.Member[i]].Type)) #>>(buf);<#
            }
            #>

            member = Serializer::Find<#= Case.CamelCase.Convert(m.Type) #>(*gameSetup, *gameState<#
            for (int i = 0; i < memberType.Id.Member.Count; ++i)
            {
                #>, classIdx<#= i #><#
            }
            #>);
        }<#
        }
        else
        {
            for (int i = 0; i < m.Array; ++i)
            {
                #>

        int size<#= i #> = ReadNext<int>(buf);<#
            }
            if (m.Array != 0)
            {
                #>

        auto& array0 = member;
        array0.resize(size0);<#
            }
            for (int i = 1; i < m.Array; ++i)
            {
                #>

        for (int idx<#= i - 1 #> = 0; idx<#= i - 1 #> < size<#= i - 1 #>; ++idx<#= i - 1 #>)
        {
            auto& array<#= i #> = array<#= i - 1 #>[idx<#= i - 1 #>];
            array<#= i #>.resize(size<#= i #>);<#
                this.PushIndent("    ");
            }
            for (int i = 1; i < m.Array; ++i)
            {
                this.PopIndent();
                #>

        }<#
            }
            for (int i = 0; i < m.Array; ++i)
            {
                #>

        for (int idx<#= i #> = 0; idx<#= i #> < size<#= i #>; ++idx<#= i #>)
        {
            auto& array<#= i + 1 #> = array<#= i #>[idx<#= i #>];<#
                this.PushIndent("    ");
            }
            if (m.Array != 0)
            {
            #>

        Deserialize(array<#= m.Array #>, buf, gameSetup, gameState);<#
                if (m.Index == ClassMemberIndexType.Strong)
                {
                    GameClass mType = CxxHelper.Definition.Class[m.Type];
                    if (mType.HasId && mType.Id.Index)
                    {
                        for (int i = 0; i < mType.Id.Member.Count; ++i)
                        {
                            #>

        array<#= m.Array #>.<#= Case.LowerCamelCase.Convert(mType.Id.Member[i]) #> = idx<#= i #>;<#
                        }
                    }
                    foreach (IndexMapping mapping in mType.IndexMapping)
                    {
                        List<IndexMapping> indexMapping = mapping.Member.SelectMany(mappingMember => mappingMember.Index).ToList();
                        if (indexMapping.Any())
                        {
                            #>

        if (<#= string.Join(" && ", indexMapping.Select(idxMapping => string.Format("{0} >= 0", idxMapping.FormatMapping(Case.LowerCamelCase, string.Format("array{0}", m.Array), "(*gameSetup)", "(*gameState)")))) #>)
        {<#
                            this.PushIndent("    ");
                        }
                        #>

        <#= mapping.FormatMapping(Case.LowerCamelCase, string.Format("array{0}", m.Array), "(*gameSetup)", "(*gameState)") #><#
                        ClassMember mapped = mapping.GetMember(CxxHelper.Definition);
                        if (mapped.Array == 0)
                        {
                            #> = &array<#= m.Array #>;<#
                        }
                        else if (mapped.Array == 1)
                        {
                            #>.push_back(&array<#= m.Array #>);<#
                        }
                        else
                        {
                            throw new Exception("Unsupported arity > 1 for mapping");
                        }
                        if (indexMapping.Any())
                        {
                            this.PopIndent();
                            #>

        }<#
                        }
                    }
                }
            }
            else
            {
            #>

        Deserialize(member, buf, gameSetup, gameState);<#
            }
            for (int i = 0; i < m.Array; ++i)
            {
                this.PopIndent();
            #>

        }<#
            }
        }
        #>

    }<#
    }
    #>

}<#
        
}
#>