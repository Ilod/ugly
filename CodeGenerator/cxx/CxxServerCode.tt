<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "Game.h"
#include <map>
#include <string>
#include "../GameServer/GameServerEntryPoint.h"
#include "../DynamicLoader/Memory.h"

namespace ugly
{
    namespace <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>
    {
        void <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::InitGame()
        {
            int players = GetPlayerCount();
            gameSetup.player.resize(players);
            gameState.player.resize(players);
            for (int i = 0; i < players; ++i)
            {
                gameSetup.player[i].id = i;
                gameState.player[i].id = i;
            }
        }

        void <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::PlayTurn()
        {

        }

        ugly::server::GameResult <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::ComputeScore()
        {
            return ugly::server::GameResult();
        }

        bool <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::ShouldPlay()
        {
            return ++turn <= 50;
        }

        bool <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::CanPlayThisTurn(int player)
        {
            return true;
        }

        std::chrono::milliseconds <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::GetNextTurnTimeLimit(int player)
        {
            return std::chrono::milliseconds(100);
        }

        std::chrono::milliseconds <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::GetSetupTimeLimit(int player)
        {
            return std::chrono::milliseconds(500);
        }

        std::chrono::milliseconds <#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>::GetCleanupTimeLimit(int player)
        {
            return std::chrono::milliseconds(1000);
        }

        class GameServerEntryPoint : public ugly::server::GameServerEntryPoint
        {
        public:
            GameServerEntryPoint(std::shared_ptr<ugly::loader::LibraryHandler> library)
                : library(library)
            {}

            ugly::loader::unique_ptr<ugly::server::IGame> CreateGame(const util::CommandLine& params) const
            {
                return ugly::loader::make_unique<<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.GameServer) #>>(library);
            }
        private:
            std::shared_ptr<ugly::loader::LibraryHandler> library;
        };
    }
}

extern "C"
{
#ifdef _MSC_VER
    __declspec(dllexport)
#endif
    void ugly_GameServerEntryPoint(void* registry, void* library);
}

void ugly_GameServerEntryPoint(void* registry, void* library)
{
    std::shared_ptr<ugly::loader::LibraryHandler> libraryPtr = *((std::shared_ptr<ugly::loader::LibraryHandler>*)library);
    static_cast<ugly::server::GameServerRegistry*>(registry)->RegisterEntryPoint(ugly::loader::make_unique<ugly::<#= Case.CamelCase.Convert(CxxHelper.Definition.Config.Namespace) #>::GameServerEntryPoint>(libraryPtr, libraryPtr));
}